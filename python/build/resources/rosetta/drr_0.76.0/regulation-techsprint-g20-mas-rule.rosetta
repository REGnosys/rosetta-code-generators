namespace drr.regulation.techsprint.g20.mas

import cdm.base.datetime.*
import cdm.base.staticdata.party.*
import cdm.event.common.*
import cdm.observable.asset.*
import cdm.base.datetime.daycount.*

import cdm.product.template.*
import cdm.product.asset.*
import cdm.product.common.settlement.*
import cdm.event.workflow.*

import drr.regulation.common.*

// https://www.mas.gov.sg/
body Authority MAS <"The Monetary Authority of Singapore (MAS) is Singapore’s central bank and integrated financial regulator. MAS also works with the financial industry to develop Singapore as a dynamic international financial centre.">

// https://sso.agc.gov.sg/Act/SFA2001
corpus Act "289" SFA <"The Securities And Futures Act relates to the regulation of activities and institutions in the securities and derivatives industry, including leveraged foreign exchange trading, of financial benchmarks and of clearing facilities, and for matters connected therewith.">

// https://sso.agc.gov.sg/SL/SFA2001-S668-2013
corpus Regulations "SFA2001-S668-2013" MAS_2013 <"The Securities And Futures (Reporting Of Derivatives Contracts) Regulations 2013 contain Regulations setting out reporting requirements for OTC counterparties for OTC derivatives.">

corpus FAQ "13May2020|FAQ" FAQ <"These FAQs are to aid implementation of the reporting obligations and elaborate on MAS’ intent for some of the requirements set out under the SF(RDC)R.">

segment part
segment definitions

report MAS SFA MAS_2013 in T+2
    when ReportableProduct // and NexusCompliant
    // using standard ISO_20022
    with type MASSFATransactionReport

type MASSFATransactionReport:
    uniqueTransactionIdentifier string  (1..1)
        [ruleReference UniqueTransactionIdentifier]
    uniqueProductIdentifier string (1..1)
        [ruleReference UniqueProductIdentifier]
    priorUniqueTransactionIdentifier string (1..1)
        [ruleReference PriorUniqueTransactionIdentifier]
    counterparty1 string (1..1)
        [ruleReference Counterparty1]
    counterparty2 string (1..1)
        [ruleReference Counterparty2]
    reportingEntity string (1..1)
        [ruleReference ReportingEntity]
    cleared string (1..1)
        [ruleReference Cleared]
    clearedEntity string (1..1)
        [ruleReference ClearedEntity]
    effectiveDate date (1..1)
        [ruleReference EffectiveDate]
    terminationDate date (1..1)
        [ruleReference TerminationDate]
    reportingTimestamp zonedDateTime (1..1)
        [ruleReference ReportingTimestamp]
    optionType string (1..1)
        [ruleReference OptionType]
    optionExpirationDate string (1..1)
        [ruleReference OptionExpirationDate]
    optionPremium string (1..1)
        [ruleReference OptionPremium]
    // BookingLocation string (1..1)
    //     [ruleReference BookingLocation]
    // TraderLocation string (1..1)
    //     [ruleReference TraderLocation]
    interestRateNotionalAmountLeg1 number(1..1)
        [ruleReference InterestRateNotionalAmountLeg1]
    interestRateNotionalCurrencyLeg1 string(1..1)
        [ruleReference InterestRateNotionalCurrencyLeg1]
    interestRateNotionalAmountLeg2 number (1..1)
        [ruleReference InterestRateNotionalAmountLeg2]
    interestRateNotionalCurrencyLeg2 string (1..1)
        [ruleReference InterestRateNotionalCurrencyLeg2]
    interestRatePayerLeg1 string (1..1)
        [ruleReference InterestRatePayerLeg1]
    interestRatePayerLeg2 string (1..1)
        [ruleReference InterestRatePayerLeg2]
    interestRateRateLeg1 number (1..1)
        [ruleReference InterestRateRateLeg1]
    interestRateRateLeg2 number (1..1)
        [ruleReference InterestRateRateLeg2]
    interestRatePaymentFrequencyPeriodLeg1 PeriodExtendedEnum (1..1)
        [ruleReference InterestRatePaymentFrequencyPeriodLeg1]
    interestRatePaymentFrequencyMultiplierLeg1 int (1..1)
        [ruleReference InterestRatePaymentFrequencyMultiplierLeg1]
    interestRatePaymentFrequencyPeriodLeg2 PeriodExtendedEnum (1..1)
        [ruleReference InterestRatePaymentFrequencyPeriodLeg2]
    interestRatePaymentFrequencyMultiplierLeg2 int (1..1)
        [ruleReference InterestRatePaymentFrequencyMultiplierLeg2]
    interestRateDayCountLeg1 DayCountFractionEnum (1..1)
        [ruleReference InterestRateDayCountLeg1]
    interestRateDayCountLeg2 DayCountFractionEnum (1..1)
        [ruleReference InterestRateDayCountLeg2]
    interestRateResetFrequencyPeriodLeg1 PeriodExtendedEnum (1..1)
        [ruleReference InterestRateResetFrequencyPeriodLeg1]
    interestRateResetFrequencyMultiplierLeg1 int (1..1)
        [ruleReference InterestRateResetFrequencyMultiplierLeg1]
    interestRateResetFrequencyPeriodLeg2 PeriodExtendedEnum (1..1)
        [ruleReference InterestRateResetFrequencyPeriodLeg2]
    interestRateResetFrequencyMultiplierLeg2 int (1..1)
        [ruleReference InterestRateResetFrequencyMultiplierLeg2]
    interestRatePrice number (1..1)
        [ruleReference InterestRatePrice]
    fXCurrency1 string (1..1)
        [ruleReference FXCurrency1]
    fXCurrency2 string (1..1)
        [ruleReference FXCurrency2]
    fXExchangeRate number (1..1)
        [ruleReference FXExchangeRate]

eligibility rule ReportableProduct
    [regulatoryReference MAS SFA MAS_2013 part "2" article "Specified derivatives contract" section "5"
        provision "The following derivatives contracts are prescribed, under the definition of “specified derivatives contract” in section 124 of the Act, as specified derivatives contracts:
                (a)	any interest rate derivatives contract which is traded in Singapore or booked in Singapore;
                (b)	any credit derivatives contract which is traded in Singapore or booked in Singapore;
                (c)	any foreign exchange derivatives contract which is traded in Singapore or booked in Singapore;
                (d)	any commodity derivatives contract which is traded in Singapore or booked in Singapore;
                (e)	any equity derivatives contract which is traded in Singapore or booked in Singapore."]
    filter when rule HasDerivativesContract

eligibility rule NexusCompliant
    [regulatoryReference MAS SFA MAS_2013 part "1 " section "Citation and commencement"
        provision "In these Regulations, unless the context otherwise requires; Booked in Singapore, Traded in Singapore"]
    (
        BookedInSingapore,
        TradedInSingapore
    )

eligibility rule BookedInSingapore
    [regulatoryReference MAS SFA MAS_2013 part "1" definitions "2.1" section "Booked in Singapore"
        provision "In relation to a derivatives contract, means the entry of the derivatives contract on the balance sheet or the profit and loss accounts of a person where —
                    (a)	the person is a party to the derivatives contract;
                    (b)	the person’s place of business is in Singapore; and
                    (c)	the balance sheet or the profit and loss accounts relates to the person’s business in Singapore"]
    filter when rule ReportingPartyIsInSingapore

eligibility rule TradedInSingapore
    [regulatoryReference MAS SFA MAS_2013 part "1" definitions "2.1" section "“Traded in Singapore"
        provision "In relation to a derivatives contract, means the execution of the derivatives contract by a trader —
                    (a)	whose place of employment is located in Singapore and who conducts, on behalf of a specified person, activities relating to the execution of derivatives contracts in Singapore; or
                    (b)	who —
                        (i)	for a period of not less than 30 days immediately before the date of the execution of the derivatives contract, conducts or is authorised to conduct, on behalf of a specified person, activities relating to the execution of derivatives contracts in Singapore; and
                        (ii)	is physically in Singapore at the time of the execution of the derivatives contract."]
    filter when rule TraderIsInSingapore

eligibility rule TraderIsInSingapore
    TraderAddressForUTI then
    extract Trader -> placeOfEmployment then
        IsAddressInSingapore

eligibility rule ReportingPartyIsInSingapore
    BookingLocationAddress then
        IsAddressInSingapore

eligibility rule BookingLocationAddress
    extract ExtractPartyFromRelatedPartyByRole( ReportableEvent -> reportableInformation -> partyInformation -> relatedParty, PartyRoleEnum -> ReportingParty ) then
    lookup BookingLocation Address

eligibility rule TraderAddressForUTI
    extract ReportableEvent -> originatingWorkflowStep -> eventIdentifier -> assignedIdentifier then
    lookup TraderDetails Trader

eligibility rule HasDerivativesContract
    ContractForEvent then
    extract Trade -> tradableProduct -> product -> contractualProduct exists

type Trader:
    name string (1..1)
    placeOfEmployment Address (1..1)
    isAuthorisedToTradeInSingapore boolean (1..1)
    currentLocation Address (1..1)

eligibility rule IsAddressInSingapore
    extract Address -> country = "SG"

reporting rule ContractForEvent
 	extract
 		if ReportableEvent -> originatingWorkflowStep -> businessEvent -> after -> trade exists then
            ReportableEvent -> originatingWorkflowStep -> businessEvent -> after -> trade
 	as "Contract"

reporting rule IsInterestRatePayout
    ContractForEvent then
    extract Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout only exists

reporting rule IsFixedFloat
	extract Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> fixedRate count = 1
	and Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> floatingRate count = 1

reporting rule InterestRatePayoutPayer
    ContractForEvent then
        filter when rule IsFixedFloat then
        extract ExtractCounterpartyByRole(
            Trade -> tradableProduct -> counterparty,
            ExtractFixedLeg( Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout ) -> payerReceiver -> payer ) -> partyReference

reporting rule InterestRatePayoutReceiver
    ContractForEvent then
        filter when rule IsFixedFloat then
        extract ExtractCounterpartyByRole(
            Trade -> tradableProduct -> counterparty,
            ExtractFixedLeg( Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout ) -> payerReceiver -> receiver ) -> partyReference

reporting rule FixedFloatLeg1 <"Fixed Float Leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II"
		rationale "In case of fixed float swaps leg 1 is the fixed rate."
		structured_provision "Leg 1 of a Fixed Float swap is by definition the Fixed leg"
		provision ""]
    ContractForEvent then
	filter when rule IsFixedFloat then
	extract Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout then
	filter when Payout -> interestRatePayout -> rateSpecification -> fixedRate exists then
	extract Payout -> interestRatePayout

reporting rule FixedFloatRateLeg1 <"Fixed Float Price">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.9"
    provision "The rate used in leg 1, where applicable. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
        ContractForEvent then extract SingleTradeLot( Trade ) then
        extract TradeLot -> priceQuantity then
        filter when PriceQuantity -> observable -> rateOption is absent then
        extract PriceQuantity -> price then
        filter when IsFixedInterestRate( PriceSchedule ) then
        extract PriceSchedule -> amount as "II.1.9 Rate leg 1"

reporting rule FixedFloatLeg2 <"Fixed Float Leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II"
		rationale "In case of fixed float swaps leg 2 is the floating rate."
		structured_provision "Leg 2 of a Fixed Float swap is by definition the Floating leg"
		provision ""]
    ContractForEvent then
	filter when rule IsFixedFloat then
	extract Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout then
	filter when Payout -> interestRatePayout -> rateSpecification -> floatingRate exists then
	extract Payout -> interestRatePayout

reporting rule FixedFloatRateLeg2
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.10"
		rationale "In case of fixed float the Price is the initial floating rate."
		structured_provision "The Price of a Fixed Float swap is by definition the Floating leg"
		provision "The rate used in leg 2, where applicable. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
        ContractForEvent then extract SingleTradeLot( Trade ) then
        extract TradeLot -> priceQuantity then
        filter when PriceQuantity -> observable -> rateOption is absent then
        extract PriceQuantity -> price then
        filter when IsInterestRateSpread( PriceSchedule ) then
        extract PriceSchedule -> amount as "II.1.10 Rate of leg 2"

reporting rule IsFixedFixed
	extract Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> fixedRate count = 2

reporting rule IsIRSwapBasis
	extract Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> floatingRate count = 2

reporting rule IsCreditDefaultPayout
    ContractForEvent then
    extract Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> creditDefaultPayout exists

reporting rule IsFxPayout
    ContractForEvent then
    extract Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> forwardPayout only exists

reporting rule UniqueTransactionIdentifier <"Unique transaction identifier (UTI)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "1.1"
    provision "An identifier to denote the transaction. For an uncleared contract that is not electronically confirmed, the specified person must report a UTI to be agreed on with the counterparty to the contract or a UTI that is internally generated. For all other contracts, the specified person must report the UTI to be agreed on with the counterparty to the contract. Field value: Alphanumeric string."]
    extract ReportableEvent -> originatingWorkflowStep -> eventIdentifier -> assignedIdentifier -> identifier as "I.1.1 UTI"

reporting rule UniqueProductIdentifier <"Unique product identifier (UPI)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "1.2"
    provision "An identifier to denote the product type (e.g. ISDA product taxonomy).  Field value: Alphanumeric string."]
	ContractForEvent then
		extract GetProductQualifier(Trade -> tradableProduct -> product -> contractualProduct -> productTaxonomy) as "I.1.2 UPI"

reporting rule PriorUniqueTransactionIdentifier <"Previous UTI (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "1.3"
    provision "To denote the previous UTI relating to this contract. Field value: Alphanumeric string."]
    PriorVersion then
    extract Trade -> tradeIdentifier -> assignedIdentifier -> identifier
    as "I.1.3 Prior UTI"
		// extract Trade -> tradableProduct -> product -> contractualProduct -> productID as "I.1.2 UPI" Model already contains concept of storing UPI with an associated metadata scheme

reporting rule PriorVersion
 	extract
        if ReportableEvent -> originatingWorkflowStep -> businessEvent -> after -> trade exists then
            ReportableEvent -> originatingWorkflowStep -> businessEvent -> after -> trade

 reporting rule Counterparty1 <"Identifier of reporting entity">
     [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "2.1"
     provision "An identifier of counterparty 1. Where counterparty 1 is a specified person, to use LEI or pre‑LEI if LEI is not available. Where counterparty 1 is not a specified person, to use LEI or pre‑LEI if LEI is not available or, if counterparty 1 does not have any LEI or pre‑LEI, to use SWIFT BIC code, AVOX ID, any identifier issued by a licensed trade repository or licensed foreign trade repository, or client code. In the case of individuals, to use a client code. Field value: Alphanumeric string."]
     InterestRatePayoutPayer then
 		extract Party -> partyId -> identifier as "I.2.1 Counterparty 1"

 reporting rule Counterparty2 <"Identifier of reporting entity">
     [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "2.2"
     provision "An identifier of counterparty 2. Where counterparty 2 is a specified person, to use LEI or pre‑LEI if LEI is not available. Where counterparty 2 is not a specified person, to use LEI or pre‑LEI if LEI is not available or, if counterparty 2 does not have any LEI or pre‑LEI, to use SWIFT BIC code, AVOX ID, any identifier issued by a licensed trade repository or licensed foreign trade repository, or client code. In the case of individuals, to use a client code. Field value: Alphanumeric string."]
     InterestRatePayoutReceiver then
 		extract Party -> partyId -> identifier as "I.2.2 Counterparty 2"

reporting rule ReportingEntity <"Identifier of reporting entity">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "2.3"
    provision "To denote the identity of the reporting entity.  To use LEI or pre‑LEI if LEI is not available.  Field value: Alphanumeric string."]
	ReportingParty then extract Party -> partyId -> identifier  as "I.2.3 Reporting Counterparty ID"

reporting rule ReportingParty <"Identifier of reporting entity">
	extract ExtractPartyFromRelatedPartyByRole( ReportableEvent -> reportableInformation -> partyInformation -> relatedParty, PartyRoleEnum -> ReportingParty)

reporting rule Cleared <"Whether the contract has been cleared">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "3.1"
    provision "To denote if the contract has been cleared. Field value: “True” or “False”."]
        extract if ReportableEvent -> originatingWorkflowStep -> businessEvent -> eventQualifier = "ClearedTrade" then "True"
            else if ReportableEvent -> originatingWorkflowStep -> businessEvent -> eventQualifier <> "ClearedTrade" then "False"
            else "" as "I.3.1 Cleared"

        // extract if ReportableEvent -> originatingWorkflowStep -> businessEvent -> eventQualifier = "ClearedTrade" then "Y"
        //     else if ReportableEvent -> originatingWorkflowStep -> businessEvent -> eventQualifier <> "ClearedTrade" then "N"
        //     else "" as "I.3.1 Cleared"

reporting rule ClearedEntity <"Identifier of clearing entity (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "3.2"
    provision "To denote the identity of the clearing entity. To use LEI or pre‑LEI if LEI is not available. Field value: Alphanumeric string."]
        return "Out of scope" as "I.3.2 Identifier of Clearing Entity"

//only works for InterestRate, Credit Default
reporting rule EffectiveDate <"Effective date or start date of contract">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "4.1"
    provision "The date under which the obligations under the contract come into effect.  Field value: ISO 8601 date format, UTC time."]
    ContractForEvent then
    extract
    if Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout only exists
    then Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> calculationPeriodDates -> effectiveDate -> adjustableDate -> unadjustedDate
    else if Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> creditDefaultPayout exists
    then Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> effectiveDate -> adjustableDate -> unadjustedDate
    else Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> effectiveDate -> adjustableDate -> unadjustedDate
    as "I.4.1 Effective Date"

//only works for InterestRate, Credit Default
reporting rule TerminationDate <"Maturity, termination or end date of contract">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "4.2"
    provision "The date of expiry of the contract.  Field value: ISO 8601 date format, UTC time."]
    ContractForEvent then
    extract
    if Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout only exists
    then Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> calculationPeriodDates -> terminationDate -> adjustableDate -> unadjustedDate
    else if Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> creditDefaultPayout exists
    then Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> terminationDate -> adjustableDate -> unadjustedDate
    else Trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> terminationDate -> adjustableDate -> unadjustedDate as "I.4.1 Termination Date"

reporting rule ReportingTimestamp <"Reporting timestamp">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "5"
    provision "The date and time when the contract was reported to a LTR or LFTR.  Field value: ISO 8601 date format, UTC time."]
    extract ReportableEvent -> originatingWorkflowStep -> timestamp then
        filter when EventTimestamp -> qualification = EventTimestampQualificationEnum -> eventCreationDateTime
            then extract EventTimestamp -> dateTime as "I.5 Reporting Timestamp"

reporting rule OptionType <"Option Type">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "6.1"
    provision "To denote the type of option. Field value: “Call” or “Put”."]
    return "N/A" as "I.6.1 Option Type"

reporting rule OptionExpirationDate <"Option expiration date">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "6.2"
    provision "The expiry date of the option. Field value: ISO 8601 date format, UTC time."]
    return "N/A" as "I.6.2 Option Expiration Date"

reporting rule OptionPremium <"Option premium">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "6.3"
    provision "The amount of option premium paid by the buyer to the seller for the reported contract. Field value: Any valid number."]
    return "N/A" as "I.6.3 Option Premium"

reporting rule BookingLocation <"Booking location">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "IA" field "6.1"
    provision "Where the contract is booked in Singapore, to use country code for Singapore “SG”. Where the contract is not booked in Singapore, to denote the country where the contract was booked. Field value: ISO 3166‑1 alpha‑2 country code."]
    BookingLocationAddress then extract Address -> country
     as "IA.6.1 Booking Location"

reporting rule TraderLocation <"Trader location">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "IA" field "6.2"
    provision "Where the contract is traded in Singapore, to use country code for Singapore “SG”. Where the contract is not traded in Singapore, to denote the country where the trader which executed the contract is located. Field value: ISO 3166‑1 alpha‑2 country code.."]
    TraderAddressForUTI then extract Trader -> currentLocation -> country as "IA.6.2 Trader Location"

// //how to associate the right quantity/price/currency with the right leg?
reporting rule InterestRateNotionalAmountLeg1 <"Notional amount for leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.1"
    provision "The notional amount of leg 1 of the contract. Field value: Any valid number."]
    FixedFloatLeg1 then
    filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
    extract InterestRatePayout -> priceQuantity -> resolvedQuantity -> amount  as "II.1.1 Notional amount leg 1"

//how to associate the right quantity/price/currency with the right leg?
reporting rule InterestRateNotionalCurrencyLeg1 <"Notional currency for leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.2"
    provision "The notional currency of leg 1 of the contract. Field value: Any valid number."]
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> priceQuantity -> resolvedQuantity -> unitOfAmount -> currency as "II.1.2 Notional currency leg 1"

reporting rule InterestRateNotionalAmountLeg2 <"Notional amount for leg 2">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.3"
    provision "The notional amount of leg 2 of the contract. Field value: Any valid number."]
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> priceQuantity -> resolvedQuantity -> amount as "II.1.3 Notional amount leg 2"

reporting rule InterestRateNotionalCurrencyLeg2 <"Notional currency for leg 2">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.4"
    provision "The notional currency of leg 2 of the contract. Field value: Any valid number."]
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> priceQuantity -> resolvedQuantity -> unitOfAmount -> currency as "II.1.4 Notional currency leg 2"

// reporting rule InterestRatePaymentAmount <"Amount of upfront payment (where applicable)">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.5"
//     provision "The amount of any upfront payment counterparty 1 made or received. Field value: Any valid number."]
//     filter when rule IsInterestRatePayout then
//     ContractForEvent then
//     extract Trade -> tradableProduct -> quantityNotation -> quantity as "II.1.5 Amount of upfront payment"

// reporting rule InterestRatePaymentCurrency <"Currency/currencies in which upfront payment is expressed (where applicable)">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.6"
//     provision "The currency/currencies in which the upfront payment is expressed. Field value: ISO currency code."]
//     filter when rule IsInterestRatePayout then
//     ContractForEvent then
//     extract Trade -> tradableProduct -> quantityNotation -> quantity as "II.1.6 Currency of upfront payment"

reporting rule InterestRatePayerLeg1 <"Payer of leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.7"
    provision "LEI of counterparty paying leg 1. Field value: Alphanumeric string."]
    filter when rule IsInterestRatePayout then
    InterestRatePayoutPayer then
    extract Party -> partyId -> identifier as "II.1.7 Payer leg 1"

reporting rule InterestRatePayerLeg2 <"Payer of leg 2">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.8"
    provision "LEI of counterparty paying leg 2. Field value: Alphanumeric string."]
    filter when rule IsInterestRatePayout then
    InterestRatePayoutReceiver then
    extract Party -> partyId -> identifier as "II.1.8 Payer leg 2"

reporting rule InterestRateRateLeg1 <"Rate of leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.9"
    provision "The rate used in leg 1, where applicable. Field value: Any valid number."]
    FixedFloatRateLeg1

reporting rule InterestRateRateLeg2 <"Rate of leg 2">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.10"
    provision "The rate used in leg 2, where applicable. Field value: Any valid number."]
    FixedFloatRateLeg2

reporting rule InterestRatePaymentFrequencyPeriodLeg1 <"Payment frequency period of leg 1 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.11"
    provision "The frequency period of payments for leg 1. Field value: D (day), M (month), W (week), Y (year) or T (term)."]
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> paymentDates -> paymentFrequency -> period as "II.1.11 Payment frequency period leg 1"

reporting rule InterestRatePaymentFrequencyMultiplierLeg1 <"Payment frequency multiplier of leg 1 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.20"
    provision "An integer number of the payment frequency period of leg 2. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier as "II.1.12 Payment frequency multiplier leg 1"

reporting rule InterestRatePaymentFrequencyPeriodLeg2 <"Payment frequency period of leg 2 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.13"
    provision "The frequency period of payments for leg 2. Field value: D (day), M (month), W (week), Y (year) or T (term)."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> paymentDates -> paymentFrequency -> period as "II.1.13 Payment frequency period leg 2"

reporting rule InterestRatePaymentFrequencyMultiplierLeg2 <"Payment frequency multiplier of leg 2 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.14"
    provision "An integer number of the payment frequency period of leg 2. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier as "II.1.14 Payment frequency multiplier leg 2"

reporting rule InterestRateDayCountLeg1 <"Day count of leg 1 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.15"
    provision "The actual number of days in the calculation period for leg 1. Field value: “1/1”, “30/360”, “30E/360.ISDA”, “30E/360”, “ACT/360”, “ACT/365.FIXED”, “ACT/365L”, “ACT/ACT.AFB”, “ACT/ACT.ICMA”, “ACT/ACT.ISDA”, “ACT/ACT.ISMA”, “BUS/252” or “Other”."]
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> dayCountFraction as "II.1.15 Day count leg 1"

reporting rule InterestRateDayCountLeg2 <"Day count of leg 2 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.16"
    provision "The actual number of days in the calculation period for leg 1. Field value: “1/1”, “30/360”, “30E/360.ISDA”, “30E/360”, “ACT/360”, “ACT/365.FIXED”, “ACT/365L”, “ACT/ACT.AFB”, “ACT/ACT.ICMA”, “ACT/ACT.ISDA”, “ACT/ACT.ISMA”, “BUS/252” or “Other”."]
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> dayCountFraction as "II.1.16 Day count leg 2"

reporting rule InterestRateResetFrequencyPeriodLeg1 <"Reset frequency period of leg 1 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.17"
    provision "The frequency period of resets for leg 1. Field value: D (day), M (month), W (week), Y (year) or T (term)."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency -> period as "II.1.17 Reset frequency period leg 1"

reporting rule InterestRateResetFrequencyMultiplierLeg1 <"Reset frequency multiplier of leg 1 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.18"
    provision "An integer number of the reset frequency period of leg 1. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency -> periodMultiplier as "II.1.18 Reset frequency multiplier leg 1"

reporting rule InterestRateResetFrequencyPeriodLeg2 <"Reset frequency period of leg 2 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.19"
    provision "The frequency period of resets for leg 2. Field value: D (day), M (month), W (week), Y (year) or T (term)."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency -> period as "II.1.19 Reset frequency period leg 2"

reporting rule InterestRateResetFrequencyMultiplierLeg2 <"Reset frequency multiplier of leg 2 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.20"
    provision "An integer number of the reset frequency period of leg 2. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency -> periodMultiplier as "II.1.20 Reset frequency multiplier leg 2"

reporting rule InterestRatePrice <"Price/spread (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.21"
    provision "Transacted price/spread. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    ContractForEvent then extract SingleTradeLot( Trade ) then
    extract TradeLot -> priceQuantity then
    filter when PriceQuantity -> observable -> rateOption exists then
    extract PriceQuantity -> price then
    filter when IsInterestRateSpread( PriceSchedule ) then
	extract PriceSchedule -> amount as "II.1.21 Price/spread"

// reporting rule FXNotionalAmount1 <"Notional amount 1">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.1"
//     provision "The notional amount of the first underlying currency. Field value: Any valid number."]
//     filter when rule IsFxPayout then
//     ContractForEvent then
//     extract Trade -> tradableProduct -> quantityNotation -> quantity1 as "IV.1.1 Notional amount 1"

reporting rule FXCurrency1 <"Currency 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.2"
    provision "The notional currency payable by specified person. Field value: ISO currency code."]
    filter when rule IsFxPayout then
    ContractForEvent then extract SingleTradeLot( Trade ) then
    extract TradeLot -> priceQuantity -> price then
    filter when PriceSchedule -> priceExpression -> priceType = PriceTypeEnum -> ExchangeRate then
    extract PriceSchedule -> unitOfAmount -> currency as "IV.1.2 Currency 1"

// reporting rule FXNotionalAmount2 <"Notional amount 2">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.3"
//     provision "The notional amount of the second underlying currency. Field value: Any valid number."]
//     filter when rule IsFxPayout then
//     ContractForEvent then
//     extract Trade -> tradableProduct -> quantityNotation -> quantity2 as "IV.1.3 Notional amount 2"

reporting rule FXCurrency2 <"Currency 2">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.4"
    provision "The notional currency payable by the counterparty. Field value: ISO currency code."]
    filter when rule IsFxPayout then
    ContractForEvent then extract SingleTradeLot( Trade ) then
    extract TradeLot -> priceQuantity -> price then
    filter when PriceSchedule -> priceExpression -> priceType = PriceTypeEnum -> ExchangeRate then
    extract PriceSchedule -> perUnitOfAmount -> currency as "IV.1.4 Currency 2"

reporting rule FXExchangeRate <"Exchange Rate">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.5"
    provision "The exchange rate of the currencies of the contract. Field value: Any valid number. "]
    filter when rule IsFxPayout then
    ContractForEvent then extract SingleTradeLot( Trade ) then
    extract TradeLot -> priceQuantity -> price then
    filter when PriceSchedule -> priceExpression -> priceType = PriceTypeEnum -> ExchangeRate then
    extract PriceSchedule -> amount as "IV.1.5 Exchange Rate"

// reporting rule FXNotionalAmount1 <"Notional amount 1">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.1"
//     provision "The notional amount of the first underlying currency. Field value: Any valid number."]
//     filter when rule IsInterestRatePayout then
//     ContractForEvent then
//     extract Trade -> tradableProduct -> quantityNotation -> quantity as "IV.1.1 Notional amount leg 1"

// reporting rule FXCurrency1 <"Currency 1">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.2"
//     provision "The notional currency payable by specified person. Field value: ISO currency code."]
//     FixedFloatLeg1 then
// 	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
// 	extract InterestRatePayout -> priceQuantity -> assetIdentifier -> currency as "II.1.2 Notional currency leg 1"

// reporting rule FXNotionalAmount2 <"Notional amount 2">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.3"
//     provision "The notional amount of the second underlying currency. Field value: Any valid number."]
//     filter when rule IsInterestRatePayout then
//     ContractForEvent then
//     extract Trade -> tradableProduct -> quantityNotation -> quantity as "II.1.3 Notional amount leg 2"

// reporting rule FXCurrency2 <"Currency 2">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.4"
//     provision "The notional currency payable by the counterparty. Field value: ISO currency code."]
//     FixedFloatLeg2 then
// 	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
// 	extract InterestRatePayout -> priceQuantity -> assetIdentifier -> currency as "II.1.4 Notional currency leg 2"

// reporting rule FXExchangeRate <"Exchange Rate">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.5"
//     provision "The notional currency of leg 2 of the contract. Field value: Any valid number."]
//     ContractForEvent then
//     extract
